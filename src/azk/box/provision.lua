local azk   = require('azk')
local app   = require('azk.app')
local utils = require('azk.utils')
local sha2  = require('azk.utils.sha')
local shell = require('azk.cli.shell')
local box   = require('azk.box')
local i18n  = require('azk.i18n')
local luker = require('luker')

local path     = require('pl.path')
local tablex   = require('pl.tablex')
local pl_utils = require('pl.utils')

local os = require('os')

local i18n_f = i18n.module("provision")
local function log_info(...)
  shell.info(i18n_f(...))
end

local function log_error(...)
  shell.error(i18n_f(...))
end

local function __provision(steps, dir, from, image)
  local file = path.join(dir, "Dockerfile")
  local data = { "# Docker file generated by azk" }

  data[#data+1] = ("FROM %s"):format(from)

  tablex.foreachi(steps, function(step)
    data[#data+1] =
      (step:match('^#.*') and "RUN echo '%s' $'\\n'" or "RUN %s"):format(step)
  end)

  data[#data+1] = ("RUN echo '%s' > /etc/azk_image"):format(image)

  path.mkdir(dir)
  pl_utils.writefile(file, table.concat(data, "\n"))

  return luker.build_image({ target = dir, tag = image })
end

-- TODO: replace by git lib or not :)
local git = path.join(azk.root_path, "libexec", "azk-git")
local function git_clone(repoUrl, version, dir)
  return os.execute(("%s %s %s %s"):format(git, repoUrl, dir, version))
end

local function check_image(image_name, force)
  local image = { image = image_name }
  log_info("searching",  image)
  local result, status = luker.image(image)
  if status == 200 then
    log_info("already", image)
    if not force then
      return false
    end
    luker.remove_image(image)
  else
    log_info("not_found", image)
  end
  return true
end

local function check_dependece(from, loop)
  image = { image = from.full_name }
  log_info("dependence.searching", image)
  local result, status = luker.image(image)
  if status ~= 200 then
    local args = { }
    if loop then
      log_info("dependence.not_found_it", image )
      return provision(from, { loop = true })
    end
    log_error("dependence.not_found", image )
    return false
  end
  return true
end

function provision(box_info, options)
  local box_path, work_dir
  local options    = options or {}
  local image_name = box_info.full_name
  local box_type   = box_info['type']

  log_info("check", { image = image_name })
  log_info("detected", { ['type'] = box_type })

  -- By path
  if box_type == "path" then
    box_path = box_info.path
    work_dir = path.join(azk.boxes_path, sha2.hash256(image_name))

  -- By github
  elseif box_type == "github" then
    box_path = path.join(azk.boxes_path, box_info.path)
    work_dir = box_path
    print(git_clone(box_info.repository, box_info.version, box_path))
  end

  -- Check for imagem
  if not check_image(image_name, options['force']) then
    return true
  end

  -- Remove old image
  log_info("making")

  local result, _app, err, code
  if box_type == "docker" then
    result, _, code = luker.pull_image({ image = image_name })
  else
    result, _app, err = app.new(box_path)
    if not result then
      shell.error(err)
      return false
    end

    if not check_dependece(_app.from, options['loop']) then
      return false
    end

    result, _, code = __provision(
      _app.content.build, work_dir, _app.from.full_name, image_name
    )
  end

  if result then
    log_info("provisioned", { image = image_name })
    return true
  end
  return false
end

return provision
