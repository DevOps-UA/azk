{"version":3,"file":"system.js","sources":["../../../src/manifest/system.js","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/0","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/17","@traceur/generated/TemplateParser/24","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/18","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/19","@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/16","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/2"],"names":[],"mappings":"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","sourcesContent":["import { _, path, fs, config, async, defer } from 'azk';\nimport { Image } from 'azk/images';\nimport { Balancer } from 'azk/agent/balancer';\nimport { XRegExp } from 'xregexp';\nimport docker from 'azk/docker';\nimport {\n  SystemDependError,\n  ImageNotAvailable,\n  RunCommandError,\n} from 'azk/utils/errors';\n\nvar MemoryStream = require('memorystream');\nvar printf       = require('printf');\nvar regex_port   = new XRegExp(\n  \"(?<private>[0-9]{1,})(:(?<public>[0-9]{1,})){0,1}(/(?<protocol>tcp|udp)){0,1}\", \"x\"\n)\n\nexport class System {\n  constructor(manifest, name, image, options = {}) {\n    this.manifest = manifest;\n    this.name     = name;\n    this.image    = new Image(image);\n    this.options  = _.merge({}, this.default_options, options);\n    this.options  = this._expand_template(options);\n  }\n\n  get default_options() {\n    return {\n      depens: [],\n      balancer: null,\n      persistent_folders: [],\n      envs: {},\n    }\n  }\n\n  get namespace() {\n    return this.manifest.namespace + '.' + this.name;\n  }\n\n  get hosts() {\n    var balancer = this.options.balancer || {};\n    return (balancer.alias || []).concat(balancer.hostname);\n  }\n\n  get balanceable() {\n    return this.hosts.length > 0;\n  }\n\n  get depends() {\n    return this.options.depends || [];\n  }\n\n  get persistent_folders() {\n    var folders = {};\n    var key  = config('agent:requires_vm') ? 'agent:vm' : 'paths';\n    var base = config(key + ':persistent_folders');\n\n    return _.reduce(this.options.persistent_folders, (folders, folder) => {\n      var origin = path.join(base, this.manifest.namespace, this.name, folder);\n      folders[origin] = folder;\n      return folders;\n    }, {});\n  }\n\n  get volumes() {\n    var volumes = { };\n\n    // Volumes\n    _.each(this.options.mount_folders, (target, point) => {\n      point = path.resolve(this.manifest.manifestPath, point);\n      volumes[point] = target;\n    });\n\n    return volumes;\n  }\n\n  instances(include_dead = false) {\n    if (include_dead) include_dead = { all: true };\n    return docker.listContainers(include_dead).then((containers) => {\n      var regex = RegExp(this.namespace);\n      return _.filter(containers, function(container) {\n        return container.Names[0].match(regex)\n      });\n    });\n  }\n\n  killAll() {\n    return this.instances().then((instances) => {\n      return this._kill_or_stop(instances, true);\n    });\n  }\n\n  scale(instances, stdout, pull = false) {\n    return async(this, function* (notify) {\n      var depends_instances = yield this._dependencies_instances();\n      if (this._check_dependencies(depends_instances)) {\n        var containers = yield this.instances();\n        yield this._check_image(pull);\n\n        var from = containers.length;\n        var to   = instances - from;\n\n        if (to != 0)\n          notify({ type: \"scale\", from, to: from + to, system: this.name });\n\n        if (to > 0) {\n          yield this.run(true, to, depends_instances);\n        } else if (to < 0) {\n          containers = containers.reverse().slice(0, Math.abs(to));\n          yield this._kill_or_stop(containers);\n        }\n      }\n      return true;\n    });\n  }\n\n  make_options(daemon, opts = {}) {\n    var name = this.namespace + (daemon ? '.daemon' : '.exec');\n    var run_options = {\n      daemon: daemon,\n      ports: {},\n      volumes: _.merge({}, this.volumes, opts.volumes || {}),\n      local_volumes: {},\n      working_dir: opts.workdir || this.options.workdir,\n      env: this.options.env || {},\n    }\n\n    // Daemon or exec mode?\n    if (!daemon) {\n      name += opts.interactive ? '.interactive' : '.raw';\n      _.merge(run_options, {\n        tty: opts.interactive ? opts.stdout.isTTY : false,\n        stdout: opts.stdout,\n        stderr: opts.stderr || opts.stdout,\n        stdin: opts.interactive ? (opts.stdin) : null,\n      });\n    }\n\n    // Persistent dir\n    run_options.local_volumes = _.merge(\n      {}, run_options.local_volumes, this.persistent_folders\n    );\n\n    run_options.ns = name;\n    return run_options;\n  }\n\n  exec(command, opts) {\n    var run_options = this.make_options(false, opts);\n    var image = this.image.name;\n\n    this.__extra_envs = opts.env || {};\n    run_options.env   = this._more_envs(run_options.env, {});\n\n    return async(this, function* () {\n      yield this._check_image(opts.pull);\n      var container = yield docker.run(image, command, run_options);\n      var data      = yield container.inspect();\n      return data.State.ExitCode\n    });\n  }\n\n  get provision_steps() {\n    var steps = this.options.provision || [];\n    if (!_.isArray(steps)) steps = [];\n    return steps;\n  }\n\n  get provisioned() {\n    var key  = this.name + \":provisioned\";\n    var date = this.manifest.getMeta(key);\n    return date ? new Date(date) : null;\n  }\n\n  set provisioned(value) {\n    var key  = this.name + \":provisioned\";\n    return this.manifest.setMeta(key, value);\n  }\n\n  provision(opts = {}) {\n    return defer((resolve, reject, notify) => {\n      var steps = this.provision_steps;\n\n      if (steps.length == 0) return null;\n      if ((!opts.force_provision) && this.provisioned) return null;\n\n      // provision command (require /bin/sh)\n      var cmd  = [\"/bin/sh\", \"-c\", \"( \" + steps.join('; ') + \" )\"];\n\n      // Erros\n      opts = _.clone(opts);\n      opts.stdout = new MemoryStream();\n      var output  = \"\";\n      opts.stdout.on('data', (data) => {\n        output += data.toString();\n      });\n\n      notify({ type: \"provision\", system: this.name });\n      return this.exec(cmd, opts).then((code) => {\n        if (code != 0) {\n          throw new RunCommandError(cmd.join(' '), output);\n        }\n        this.provisioned = new Date();\n      });\n    });\n  }\n\n  get ports() {\n    var ports = this.options.ports || {};\n    if (_.keys(ports).length == 0) {\n      ports.__default__ = \"5000/tcp\"\n    }\n\n    return _.reduce(ports, (ports, port, name) => {\n      port = XRegExp.exec(port, regex_port);\n      port.protocol = port.protocol || \"tcp\";\n\n      var config = { HostIp: \"0.0.0.0\" };\n      if (port.public)\n        config.HostPort = port.public;\n\n      ports[name] = {\n        config : config,\n        name   : port.private + \"/\" + port.protocol,\n        private: port.private\n      };\n      return ports;\n    }, {})\n  }\n\n  run(daemon, instances, depends_instances) {\n    var self    = this;\n    var options = this.make_options(true);\n\n    // Add more envs\n    options.env = this._more_envs(options.env, {}, depends_instances);\n\n    // Command\n    var cmd = ['/bin/sh', '-c', this.options.command];\n\n    // Port map\n    _.each(this.ports, (data, name) => {\n      var env_key = \"PORT\";\n      if (name != \"__default__\")\n        env_key = `${name.toUpperCase()}_${env_key}`;\n\n      options.env[env_key] = data.private;\n      options.ports[data.name] = [data.config]\n    });\n\n    return async(this, function* (notify) {\n      for(var i = 0; i < instances; i++) {\n        notify({ type: 'run_service', system: this.name });\n        var container = yield docker.run(this.image.name, cmd, options);\n        yield this._balancer_add(yield container.inspect());\n      }\n    });\n  }\n\n  _check_image(pull = false) {\n    return async(this, function* () {\n      if (pull) {\n        var promise = this.image.pull();\n      } else {\n        var promise = this.image.check().then((image) => {\n          if (image == null) {\n            throw new ImageNotAvailable(this.name, this.image.name);\n          }\n          return image;\n        });\n      }\n\n      var image = yield promise.progress((event) => {\n        event.system = this;\n        return event;\n      });\n\n      this.image_data = yield image.inspect();\n    });\n  }\n\n  _check_dependencies(instances) {\n    var not_valid = _.find(this.depends, (depend_name) => {\n      return instances[depend_name].length <= 0\n    });\n    if (not_valid) {\n      throw new SystemDependError(this.name, not_valid, 'run');\n    }\n    return true;\n  }\n\n  _dependencies_instances() {\n    var self = this;\n    var instances = {};\n    return async(function* () {\n      for (var depend_name of self.depends) {\n        var depend = self.manifest.systems[depend_name];\n        if (depend instanceof System) {\n          instances[depend_name] = yield depend.instances();\n        } else {\n          throw new SystemDependError(self.name, depend_name, 'define');\n        }\n      }\n      return instances;\n    });\n  }\n\n  _kill_or_stop(instances, kill = false) {\n    var self = this;\n    var port = self.options.port || 3000;\n    return async(function* (notify) {\n      var container = null;\n      while (container = instances.pop()) {\n        yield self._remove_proxy(port, container);\n        container = docker.getContainer(container.Id);\n        if (kill) {\n          notify({ type: 'kill_service', system: self.name });\n          yield container.kill();\n        } else {\n          notify({ type: 'stop_service', system: self.name });\n          yield container.stop();\n        }\n      }\n    })\n  }\n\n  _balancer_add(container) {\n    if (this.balanceable) {\n      var ports = this.ports;\n      var port  = ports.http || ports.__default__;\n\n      var backend = printf(\n            \"http://%s:%s\", config('agent:vm:ip'),\n            container.NetworkSettings.Ports[port.name][0].HostPort\n          );\n      return Balancer.addBackend(this.hosts, backend);\n    }\n  }\n\n  _remove_proxy(port, container) {\n    if (!_.isEmpty(this.hosts)) {\n      var backend = printf(\n            \"http://%s:%s\", config('agent:vm:ip'),\n            container.Ports[0].PublicPort\n          );\n      return Balancer.removeBackend(this.hosts, backend);\n    }\n  }\n\n  _expand_template(options) {\n    return JSON.parse(_.template(JSON.stringify(options), {\n      system: {\n        name: this.name,\n        persistent_folders: \"/data\",\n      },\n      manifest: {\n        dir: this.manifest.manifestDirName,\n        project_name: this.manifest.manifestDirName,\n      },\n      azk: {\n        default_domain: config('docker:default_domain'),\n        balancer_port: config('agent:balancer:port'),\n      }\n    }));\n  }\n\n  add_env(key, value) {\n    this.__extra_envs = _.merge(this.__extra_envs || {}, { [key]: value });\n  }\n\n  _more_envs(envs, options, depends_instances = []) {\n    return _.merge({},\n      this._dependencies_envs(depends_instances),\n      this._envs_from_file(),\n      envs,\n      this.__extra_envs || {}\n    )\n  }\n\n  // TODO: fix api x database\n  // TODO: fix multi port\n  _dependencies_envs(depends_instances) {\n    var envs = {};\n\n    _.each(depends_instances, (instances, depend) => {\n      _.each(instances, (instance) => {\n        envs[depend.toUpperCase() + '_HOST'] = config('agent:vm:ip');\n        envs[depend.toUpperCase() + '_PORT'] = instance.Ports[0].PublicPort;\n      })\n    });\n\n    return envs;\n  }\n\n  _envs_from_file() {\n    var envs = {};\n    var file = path.join(this.manifest.manifestPath, '.env');\n\n    if (fs.existsSync(file)) {\n      var content = fs.readFileSync(file).toString();\n      _.each(content.split('\\n'), (entry) => {\n        entry = entry.split('=');\n        envs[entry[0]] = entry[1];\n      });\n    }\n\n    return envs;\n  }\n}\n","var __moduleName = $__placeholder__0;","require($__placeholder__0)","var $__placeholder__0 = $__placeholder__1","var $__placeholder__0 = $__placeholder__1","($traceurRuntime.createClass)($__placeholder__0, $__placeholder__1, $__placeholder__2)","return $__placeholder__0(\n            $__placeholder__1,\n            this);","$traceurRuntime.generatorWrap","function($ctx) {\n      while (true) $__placeholder__0\n    }","return $__placeholder__0","$ctx.sent","$ctx.state = ($__placeholder__0) ? $__placeholder__1 : $__placeholder__2;\n        break","$ctx.maybeThrow()","$ctx.returnValue = $__placeholder__0","return $ctx.end()","\n        for (var $__placeholder__0 =\n                 $__placeholder__1[Symbol.iterator](),\n                 $__placeholder__2;\n             !($__placeholder__3 = $__placeholder__4.next()).done; ) {\n          $__placeholder__5;\n          $__placeholder__6;\n        }","module.exports = $__placeholder__0;","get $__placeholder__0() { return $__placeholder__1; }","__esModule: true"]}