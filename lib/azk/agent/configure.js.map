{"version":3,"file":"configure.js","sources":["../../../src/agent/configure.js","@traceur/generated/TemplateParser/4","@traceur/generated/TemplateParser/0","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/6","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/5","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/2"],"names":[],"mappings":"AAAA;ACAI,CAAJ,EAAI,CAAA,YAAY,wBAAoB,CAAC;UCArC,CAAA,OAAO,CFAsB,KAAK,CEAR;;;;UAA1B,CAAA,OAAO,CFC4B,KAAK,CEDd;;;aAA1B,CAAA,OAAO,CFEiB,YAAY,CEFV;UAA1B,CAAA,OAAO,CFG0C,kBAAkB,CEHzC;;;AFMtB,CAAJ,EAAI,CAAA,KAAK,EAAG,CAAA,OAAO,CAAC,OAAO,CAAC,CAAC;AGNzB,CAAJ,EAAI,YHQG,SAAM,UAAS,CACR,cAAc,CAAE;AIT9B,CJUI,gBIVW,UAAU,6CJUf,cAAc,EIT6B,CJS3B;CGVe,AHWtC,CGXsC;AEArC,CAAJ,EAAI,uBAAqC,CAAA;ACAzC,CAAA,AAAC,eAAe,YAAY,CAAC;CNc3B,IAAG,CAAH,UAAI,CAAE;AACA,CAAJ,MAAI,CAAA,MAAM,EAAG,CAAA,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;CACjC,OAAI,MAAM,CAAE;CACV,WAAO,CAAA,MAAM,MAAM,CAAC,IAAI,CAAC,CAAC;KAC3B,KAAM;CACL,UAAM,IAAI,eAAc,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;KACzC;CAAA,EACF;CAGD,OAAM,CAAN,UAAO,CAAE;CACP,SAAO,CAAA,CAAC,IAAI,CAAC,CACX,IAAI,OAAO,CAAC,YAAY,CAAC,CACzB,CAAA,IAAI,OAAO,CAAC,OAAO,CAAC,CACrB,CAAC,CAAC;GACJ;CAMD,OAAM,CAAN,UAAO,OAAO;CACZ,SAAO,CAAA,CAAC,OACC,CAAC,KAAK,CAAE,QAAO,CAAC,KAClB,YAAO;CACV,UAAM,IAAI,iBAAgB,CAAC,OAAO,CAAC,CAAC;KACrC,EAAC,CAAC;GACN;MAjC4B,QAAO,CMPmB;ACDzD,CAAA,KAAM,QAAQ;CCAd,gBAAwB;CAAE,oBAAyB;GAAE;ACArD,CAAA,WAAU,CAAE,KAAI;CAAA,AFAkB,CAAC;CP2CnC","sourcesContent":["import { os, Q, async } from 'azk';\nimport { config, set_config } from 'azk';\nimport { UIProxy } from 'azk/cli/ui';\nimport { OSNotSupported, DependencieError } from 'azk/utils/errors';\n\n// Search for command in path\nvar which = require('which');\n\nexport class Configure extends UIProxy {\n  constructor(user_interface) {\n    super(user_interface);\n  }\n\n  // Run configures and checks by operational system\n  run() {\n    var method = this[os.platform()];\n    if (method) {\n      return method.apply(this);\n    } else {\n      throw new OSNotSupported(os.platform());\n    }\n  }\n\n  // Mac OS X configure and checks\n  darwin() {\n    return Q.all([\n      this._which('VBoxManage'),\n      this._which('unfsd'),\n    ]);\n  }\n\n  // Linux configure and checks\n  //linux() {\n  //}\n\n  _which(command) {\n    return Q\n      .nfcall(which, command)\n      .fail(() => {\n        throw new DependencieError(command);\n      });\n  }\n}\n","var __moduleName = $__placeholder__0;","require($__placeholder__0)","var $__placeholder__0 = $__placeholder__1","$traceurRuntime.superCall($__placeholder__0, $__placeholder__1, $__placeholder__2,\n                                   $__placeholder__3)","var $__placeholder__0 = $__placeholder__1","($traceurRuntime.createClass)($__placeholder__0, $__placeholder__1, $__placeholder__2,\n                                       $__placeholder__3)","module.exports = $__placeholder__0;","get $__placeholder__0() { return $__placeholder__1; }","__esModule: true"]}