#!/bin/sh

dirname=$(dirname $0)
pushd $dirname 1>/dev/null 2>/dev/null && absname=$(pwd) && popd 1>/dev/null 2>/dev/null 

OS=Unknown
ARCH=Unknown
SO=.Unknown

# Find ARCH by machine
case `uname -m` in
    x86_64) ARCH=x64;;
    i686)   ARCH=x86;;
    i386)   ARCH=x86;;
    arm*)   ARCH=arm;;
esac

# Find OS by kernel name
case `uname -s` in
  Linux)
    OS=linux
    OSARCH=$OS/$ARCH
    SO=.so
    # this should go away at some point (-Wl,-rpath $ORIGN)
    export LD_LIBRARY_PATH=$absname/luadist/$OSARCH/bin/:$LD_LIBRARY_PATH
    ;;
  Darwin)
    OS=osx
    OSARCH=$OS # universal
    SO=.dylib
    # this should go away at some point (install_name_tool with @rpath and @executable path)
    export DYLD_LIBRARY_PATH=$absname/luadist/$OSARCH/bin:$DYLD_LIBRARY_PATH
    ;;
  *)
    case `uname -o` in
      Cygwin)
        OS=Windows
        SO=.dll
        ;;
    esac
esac

function_exists () {
  FUNCTION_NAME=$1
  [ "type $FUNCTION_NAME" = "$FUNCTION_NAME is a shell function" ] && return 1
  [ -z "$FUNCTION_NAME" ] && return 1
  declare -F "$FUNCTION_NAME" > /dev/null 2>&1
  return $?
}

# Readline wrap
rlwrap="$(which rlwrap 2>/dev/null || echo "exec")"

# Luajit interpreter
luajit_path="$dirname/luadist/$OSARCH"
luajit="$luajit_path/bin/luajit"

# Lua paths in luadist
LUA_PATH="$LUA_PATH;$luajit_path/lib/lua/?.lua"
LUA_PATH="$LUA_PATH;$luajit_path/lib/lua/?/init.lua"
export LUA_PATH

# main is declared?
if ! type luajit_main 2>/dev/null | grep 'function$' 1>/dev/null 2>/dev/null; then
  luajit_main () {
    $rlwrap $luajit "${@}"
  }
fi

# run main function
luajit_main "${@}"

