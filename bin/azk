#!/bin/bash

set -e

__FILE__="${0}"
export AZK_ROOT_PATH=`cd \`dirname $(readlink ${__FILE__} || echo ${__FILE__} )\`/..; pwd`
export DEFAULT_DATA_PATH=${DEFAULT_DATA_PATH:-$AZK_ROOT_PATH/data}

export PATH=/usr/bin:/bin:/usr/sbin
export PATH=$AZK_ROOT_PATH/bin:$PATH
export PATH=$AZK_ROOT_PATH/lib/libexec:$PATH
export PATH=$AZK_ROOT_PATH/node_modules/.bin:$PATH

# Azk opts
export AZK_CURRENT_SYSTEM="${AZK_CURRENT_SYSTEM:-`pwd`}"
[ -n "$NODE_DEBUG" ] && { export NODE_DEBUG="--debug-brk"; }

export NODE_PATH=$AZK_ROOT_PATH
export NODE_PATH=$AZK_ROOT_PATH/node_modules:$NODE_PATH
export NODE_PATH=$AZK_ROOT_PATH/build:$NODE_PATH

# Configure NVM and VM
export NVM_DIR=$DEFAULT_DATA_PATH/nvm
export VM_DISK_PATH=$DEFAULT_DATA_PATH/vm

# local
node_version="${NODE_VERSION:-v0.10.26}"
libexec_deps=$AZK_ROOT_PATH/lib/libexec
git_raw=https://raw2.github.com
nvm_url=$git_raw/creationix/nvm/master/nvm.sh
nvm_file=$libexec_deps/nvm.sh
data_url=http://goo.gl/OKXJO7
boot_url=http://goo.gl/DAnaCj
boot_file=$VM_DISK_PATH/debian2docker.iso
update=""

log() {
  e="echo"
  if [ -n "$2" -a "$1" == "-n" ]; then
    shift
    e="echo -n"
  fi
  $e >&2 "${*}"
}

# Check if all required commands exist
cmd_exists() {
  while [ -n "$1" ]; do
    command -v $1 >/dev/null 2>&1 || \
      { log "command '$1' is required but not installed.  Aborting."; notOK=1; }
    shift
  done
  if [ -n "$notOK" ]; then
    exit 1
  fi
}
cmd_exists git nc curl grep head tr

# Roles
check_nvm() {
  [ -n "$update" ] && rm $nvm_file
  [ -f $nvm_file ]
}

check_node() {
  . $libexec_deps/nvm.sh
  nvm use $node_version &>/dev/null
}

check_npm() {
  [ -n "$update" ] && return 1;
  [ -d $AZK_ROOT_PATH/node_modules ]
}

check_sum() {
  shasum --portable $1 | awk '{ print $1 }'
}

check_boot_disk() {
  [ -n "$update" -a -f $boot_file ] && {
    actual_version=`shasum --portable $boot_file | awk '{ print $1 }'`
    new_version=`curl http://azk.s3.amazonaws.com/debian2docker.sha 2>/dev/null`
    [ "${actual_version}" != "${new_version}" ] && {
      rm $boot_file
    }
  }
  [ -f $boot_file ]
}

check_data_disk() {
  [ -f $VM_DISK_PATH/azk-agent.vmdk.bz ]
}

# Check for depedencies
# TODO: format logs as standard
check_depedencies() {
  msg() {
    log "azk:error dependencies '$1' not installed. Run 'azk configure'"
    exit 1
  }

  check_nvm  || msg nvm
  check_node || msg node
  check_npm  || msg 'node dependencies'
  check_data_disk || msg 'blank data disk'
  check_boot_disk || msg 'iso vm boot'
}

check_install() {
  log -n "- $2: "
  if `$1` ; then
    echo "ok" >&2
  else
    echo "fail" >&2
    return 1
  fi
}

update_code_base() {
  if [ -n "$update" ]; then
    cd "$AZK_ROOT_PATH"
    if `./bin/azk agent status 2>/dev/null` ; then
      log "Azk agent is running, stop before update!"
      exit 1;
    fi
    git pull . origin/stable
  fi
}

configure() {
  [ "$1" == '--update' ] && { update="true"; }
  ok()   { echo "ok" >&2; }
  fail() { echo "fail" >&2; }

  # Update azk code base
  update_code_base

  check_install "check_nvm" "Check nvm" || {
    log "Install nvm..."
    curl $nvm_url -o $nvm_file
  }

  # Load nvm
  mkdir -p $NVM_DIR
  . $libexec_deps/nvm.sh

  check_install "check_node" "Check node" || {
    log "Install node..."
    nvm install $node_version
  }

  nvm use $node_version &>/dev/null
  check_install "check_npm" "Check azk node dependencies" || {
    log "Install node depedencies..."
    cd $AZK_ROOT_PATH
    npm install --production
  }

  # Vm disks
  mkdir -p $VM_DISK_PATH

  check_install "check_boot_disk" "Check iso to boot vm" || {
    log "Download iso"
    curl -L $boot_url -o $boot_file
  }

  check_install "check_data_disk" "Check blank data disk" || {
    log "Download disk"
    curl -L $data_url -o $VM_DISK_PATH/azk-agent.vmdk.bz
  }
}

azk_main() {
  case "$1" in
    update)
      configure --update
      ;;
    configure)
      configure
      ;;
    nvm)
      check_depedencies
      shift; "${@}"
      ;;
    *)
      check_depedencies
      cd $AZK_ROOT_PATH && node $NODE_DEBUG --harmony $AZK_ROOT_PATH/bin/azk.js "${@}"
  esac
}

# run main function
azk_main "${@}"
