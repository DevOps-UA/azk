#!/bin/bash

set -e

__FILE__="${0}"
export AZK_ROOT_PATH=`cd \`dirname $(readlink ${__FILE__} || echo ${__FILE__} )\`/..; pwd`
export AZK_DATA_PATH=${AZK_DATA_PATH:-$AZK_ROOT_PATH/data}

# No use DOCKER_HOST
unset DOCKER_HOST

# OS
UNFSD_INSTALL="Install unfs3 packaged before continue.";
case `uname -s` in
  Linux)
    SO="linux"
    export AZK_USE_VM=${AZK_USE_VM:-false}
    export AZK_UNFSD_PATH=${AZK_UNFSD_PATH:-`which unfsd`}

    if [ "$AZK_US_VM" == "false" ]; then
      export AZK_AGENT_VM_IP="${AZK_AGENT_VM_IP:-127.0.0.1}"
    fi
    ;;
  Darwin)
    SO="darwin"
    if [ -n `which brew` ]; then
      UNFSD_INSTALL="\`brew install unfs3\` before continue.";
      PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
      export AZK_UNFSD_PATH=${AZK_UNFSD_PATH:-`which unfsd`}
    else
      export AZK_UNFSD_PATH=${AZK_UNFSD_PATH:-`which unfsd`}
    fi;
    export AZK_USE_VM=${AZK_USE_VM:-true}
    export AZK_DATA_PATH=${AZK_DATA_PATH:-$AZK_ROOT_PATH/data}
    ;;
  *)
    echo "azk: System not supported (see http://azk.io)";
    exit 1;
esac

# Share system
export AZK_PING_PATH=${AZK_PING_PATH:-`which ping`}

export PATH=/usr/bin:/bin:/usr/sbin
export PATH=$AZK_ROOT_PATH/bin:$PATH
export PATH=$AZK_ROOT_PATH/node_modules/.bin:$PATH

# Azk opts
export AZK_CURRENT_SYSTEM="${AZK_CURRENT_SYSTEM:-`pwd`}"
[ -n "$NODE_DEBUG" ] && { export NODE_DEBUG="--debug-brk"; }

export NODE_PATH=$AZK_ROOT_PATH
export NODE_PATH=$AZK_ROOT_PATH/node_modules:$NODE_PATH
export NODE_PATH=$AZK_ROOT_PATH/lib:$NODE_PATH

agent_ip() {
  $AZK_PING_PATH -q -c 1 -t 1 $1 2>/dev/null | grep PING | sed -e "s/).*//" | sed -e "s/.*(//"
}

# Configure NVM and VM
export NVM_DIR=$AZK_DATA_PATH/nvm
export VM_DISK_PATH=$AZK_DATA_PATH/vm
export AZK_AGENT_VM_NAME="${AZK_AGENT_VM_NAME:-azk-agent}"
export AZK_AGENT_VM_IP="${AZK_AGENT_VM_IP:-`agent_ip $AZK_AGENT_VM_NAME`}"

# local
node_version="${NODE_VERSION:-v0.10.26}"
nvm_file=$AZK_ROOT_PATH/vendor/bin/nvm.sh
aws_bucket=https://s3-sa-east-1.amazonaws.com/azk
data_url=$aws_bucket/azk-agent.vmdk.gz
boot_url=$aws_bucket/debian2docker.iso
boot_file=$VM_DISK_PATH/debian2docker.iso
update=""
data_folders=(
  "$AZK_DATA_PATH"
  "$NVM_DIR"
  "$VM_DISK_PATH"
  "$AZK_DATA_PATH/run"
  "$AZK_DATA_PATH/logs"
)

azk.tput() {
  [ -z "$TERM" ] && return 0
  eval "tput $@"
}

azk.escape() {
  echo "$@" | sed "
    s/%{red}/$(azk.tput setaf 1)/g;
    s/%{green}/$(azk.tput setaf 2)/g;
    s/%{yellow}/$(azk.tput setaf 3)/g;
    s/%{blue}/$(azk.tput setaf 4)/g;
    s/%{magenta}/$(azk.tput setaf 5)/g;
    s/%{cyan}/$(azk.tput setaf 6)/g;
    s/%{white}/$(azk.tput setaf 7)/g;
    s/%{reset}/$(azk.tput sgr0)/g;
    s/%{[a-z]*}//g;
  "
}

azk.escape_clear() {
  echo "$@" | sed "s/%{[a-z]*}//g;"
}

azk.valid_ip() {
  local ip=$1
  local stat=1

  if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    OIFS=$IFS
    IFS='.'
    ip=($ip)
    IFS=$OIFS
    [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
        && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
    stat=$?
  fi
  return $stat
}

azk=$AZK_ROOT_PATH/bin/azk
azk_ok="%{green}azk%{reset}"
azk_fail="%{red}azk%{reset}"

log() {
  e="echo"
  if [ -n "$2" -a "$1" == "-n" ]; then
    shift
    e="echo -n"
  fi
  $e >&2 "$(azk.escape "${*}")"
  $e >&1 "$(azk.escape_clear "${*}")" | logger -t azk-configure
}

download() {
  log -n "%{cyan}azk%{reset}: Downloading $1 to $2" | logger -t azk-install
  (
    {
      result="`curl -L -sS $1 -o $2 --connect-timeout 10 2>&1`"
    } && {
      azk.escape " [%{green}ok%{reset}]"
      echo $result | logger -t azk-install >/dev/null
      return 0;
    } || {
      azk.escape " [%{red}fail%{reset}]"
      logger -t azk-install $result >/dev/null
      azk.escape "$azk_fail: ${result}"
      azk.escape "$azk_fail: try again or report"
      return 1;
    }
  )
}

# Check if all required commands exist
cmd_exists() {
  while [ -n "$1" ]; do
    command -v $1 >/dev/null 2>&1 || \
      { log "command '$1' is required but not installed. Aborting."; notOK=1; }
    shift
  done
  if [ -n "$notOK" ]; then
    exit 1
  fi
}
cmd_exists git nc curl grep head tr

# Roles
check_data_folders() {
  for dir in "${data_folders[@]}"; do
    [ -d "$dir" ] || mkdir -p $dir
  done
}

check_node() {
  . $nvm_file
  nvm use $node_version &>/dev/null
}

check_npm() {
  [ -n "$update" ] && return 1;
  [ -d $AZK_ROOT_PATH/node_modules ]
}

check_sum() {
  shasum --portable $1 | awk '{ print $1 }'
}

check_unfsd() {
  [ "$AZK_USE_VM" == "false" ] && return 0;
  [ -n "$AZK_UNFSD_PATH" ]
}

check_boot_disk() {
  [ -n "$update" -a -f $boot_file ] && {
    actual_version=`shasum --portable $boot_file | awk '{ print $1 }'`
    new_version=`curl $aws_bucket/debian2docker.sha 2>/dev/null`
    [ "${actual_version}" != "${new_version}" ] && {
      rm $boot_file
    }
  }
  [ -f $boot_file ]
}

check_data_disk() {
  [ -f $VM_DISK_PATH/azk-agent.vmdk.bz ]
}

check_vm_ip() {
  [ -n "$AZK_AGENT_VM_IP" ] && return 0;
  [ "$AZK_USE_VM" == "false" ] && return 0;
  [ "$1" == "version" ] && return 0;
  return 1;
}

# Check for depedencies
# TODO: format logs as standard
msg_depens() {
  inst=${2:-Run '`azk check-install`'}
  log "$azk_fail: error dependencies '$1' not installed. $inst"
  exit 1
}

check_depedencies() {
  check_data_folders

  check_vm_ip $1 || msg_depens "virtual machine ip"
  check_unfsd || msg_depens 'unfsd' "$UNFSD_INSTALL"
  check_node  || msg_depens node
  check_npm   || msg_depens 'node dependencies'

  if [ "$AZK_USE_VM" != "false" ]; then
    check_data_disk || msg_depens 'initial data disk'
    check_boot_disk || msg_depens 'iso vm boot'
  fi
}

check_install() {
  check=$1; name=$2;
  shift 2;
  log -n "%{yellow}azk%{reset}: Check $name: "
  if `$check ${@}` ; then
    azk.escape "[%{green}ok%{reset}]" >&2
  else
    azk.escape "[%{red}not_found%{reset}]" >&2
    return 1
  fi
}

update_code_base() {
  if [ -n "$update" ]; then
    cd "$AZK_ROOT_PATH"
    ./bin/azk agent status &>/dev/null && {
      log "$azk_fail: agent is running, stop before update!"
      exit 1;
    }
    log -n "$azk_ok: Update code..."
    git pull . origin/stable 2>&1 | logger -t azk
    log "[%{green}ok%{reset}]" >&2
  fi
}

update_vm() {
  [ "$AZK_USE_VM" == "false" ] && return 0;
  if [ -n "$update" ]; then
    [ -d "$AZK_ROOT_PATH/.azk" ] && rm -Rf $AZK_ROOT_PATH/.azk
    $azk vm installed &>/dev/null || return 0;
    $azk vm remove
  fi
}

check_is_installed() {
  $AZK_ROOT_PATH/bin/azk --version &>/dev/null
}

vm_ip_msg() {
  echo ""
  azk.escape "In order to give \`azk\` access to \`azk agent\`,"
  azk.escape "it is necessary to define an IP address to the virtual machine."
  azk.escape "This IP address will be used to establish a private network"
  azk.escape "between the physical machine running \`azk\` and the virtual"
  azk.escape "machine where \`azk agent\` is in execution."
  echo ""
}

configure_vm_ip() {
  default_ip="192.168.50.4"
  msg="$(azk.escape "Enter de vm ip: (default: %{yellow}${default_ip}%{reset}): ")"
  read -p "$msg" ip
  ip=${ip:-$default_ip}
  if azk.valid_ip "$ip"; then
    azk.escape "Adding %{yellow}${ip}%{reset} to /etc/hosts ...";
    set -x
    echo -e "\n# Azk agent vm ip\n$ip azk-agent" | sudo tee -a /etc/hosts >/dev/null
    set +x
    echo ""
  else
    azk.escape "$azk_fail: %{yellow}${ip}%{reset} is a invalid v4 ip, try again.";
    configure_vm_ip;
  fi
}

install() {
  log_i() { azk.escape -n "%{green}azk%{reset}: ${@}"; }

  check_install "check_vm_ip" "vm ip" $1 || { vm_ip_msg; configure_vm_ip; }
  check_unfsd || msg_depens 'unfsd' "$UNFSD_INSTALL"

  # Update azk code base
  [ "$1" == '--update' ] && {
    check_is_installed || {
      log "$azk_fail: Can not be updated because it does not installed. Try \`azk check-install\`";
      exit 1;
    }
    update="true"
    update_code_base
    update_vm
  }

  # Load nvm
  . $nvm_file

  check_install "check_node" "node" || {
    log_i "Install node..."
    nvm install $node_version
  }

  nvm use $node_version &>/dev/null
  check_install "check_npm" "azk node dependencies" || {
    log_i "Install node depedencies..."
    cd $AZK_ROOT_PATH
    npm install --production &>/dev/null
  }

  # Vm disks
  if [ "$AZK_USE_VM" != "false" ]; then
    mkdir -p $VM_DISK_PATH

    check_install "check_boot_disk" "iso to boot vm" || {
      log_i "Download iso"
      download $boot_url $boot_file
    }

    check_install "check_data_disk" "initial data disk" || {
      log_i "Download initial data disk"
      download $data_url $VM_DISK_PATH/azk-agent.vmdk.bz
    }
  fi

  if [ -n "$update" ]; then
    log "%{magenta}azk%{reset}: Update done, re-check dependencies";
    exec $AZK_ROOT_PATH/bin/azk check-install;
  else
    log "$azk_ok: Azk has installed and configured"
  fi
}

azk_main() {
  case "$1" in
    update)
      install --update
      ;;
    check-install|configure)
      install $1
      ;;
    nvm)
      check_depedencies
      shift; "${@}"
      ;;
    ssh)
      ssh_opts="StrictHostKeyChecking=no -o LogLevel=quiet -o UserKnownHostsFile=/dev/null"
       id_file="$AZK_ROOT_PATH/src/share/id_rsa_insecure"
        vm_url="docker@$AZK_AGENT_VM_IP"

      chmod og-rwx $id_file
      shift; exec ssh -i $id_file -o $ssh_opts $vm_url $*
      ;;
    *)
      check_depedencies $1
      cd $AZK_ROOT_PATH && node $NODE_DEBUG --harmony $AZK_ROOT_PATH/bin/azk.js "${@}"
  esac
}

# run main function
azk_main "${@}"
