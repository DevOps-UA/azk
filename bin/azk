#!/bin/bash

set -e

__FILE__="${0}"
export AZK_ROOT_PATH=`cd \`dirname $(readlink ${__FILE__} || echo ${__FILE__} )\`/..; pwd`
export AZK_DATA_PATH=${AZK_DATA_PATH:-$AZK_ROOT_PATH/data}

# OS
UNFSD_INSTALL="Install unfs3 packaged before continue.";
case `uname -s` in
  Linux)
    SO="linux"
    export AZK_USE_VM=${AZK_USE_VM:-false}
    ;;
  Darwin)
    SO="darwin"
    if [ -n `which brew` ]; then
      UNFSD_INSTALL="\`brew install unfs3\` before continue.";
    fi;
    export AZK_USE_VM=${AZK_USE_VM:-true}
    ;;
  *)
    echo "azk: System not supported (see http://azk.io)";
    exit 1;
esac

# Share system
export AZK_UNFSD_PATH=${AZK_UNFSD_PATH:-`which unfsd`}
export AZK_PING_PATH=${AZK_PING_PATH:-`which ping`}

export PATH=/usr/bin:/bin:/usr/sbin
export PATH=$AZK_ROOT_PATH/bin:$PATH
export PATH=$AZK_ROOT_PATH/lib/libexec:$PATH
export PATH=$AZK_ROOT_PATH/node_modules/.bin:$PATH

# Azk opts
export AZK_CURRENT_SYSTEM="${AZK_CURRENT_SYSTEM:-`pwd`}"
[ -n "$NODE_DEBUG" ] && { export NODE_DEBUG="--debug-brk"; }

export NODE_PATH=$AZK_ROOT_PATH
export NODE_PATH=$AZK_ROOT_PATH/node_modules:$NODE_PATH
export NODE_PATH=$AZK_ROOT_PATH/build:$NODE_PATH

agent_ip() {
  $AZK_PING_PATH -q -c 1 -t 1 $1 2>/dev/null | grep PING | sed -e "s/).*//" | sed -e "s/.*(//"
}

# Configure NVM and VM
export NVM_DIR=$AZK_DATA_PATH/nvm
export VM_DISK_PATH=$AZK_DATA_PATH/vm
export AZK_AGENT_VM_NAME="${AZK_AGENT_VM_NAME:-azk-agent}"
export AZK_AGENT_VM_IP="${AZK_AGENT_VM_IP:-`agent_ip $AZK_AGENT_VM_NAME`}"
export AZK_AGENT_VM_IP="${AZK_AGENT_VM_IP:-127.0.0.1}"

# local
node_version="${NODE_VERSION:-v0.10.26}"
libexec_deps=$AZK_ROOT_PATH/lib/libexec
git_raw=https://raw2.github.com
nvm_url=$git_raw/creationix/nvm/master/nvm.sh
nvm_file=$libexec_deps/nvm.sh
data_url=http://goo.gl/OKXJO7
boot_url=http://goo.gl/DAnaCj
boot_file=$VM_DISK_PATH/debian2docker.iso
update=""
data_folders=(
  "$AZK_DATA_PATH"
  "$NVM_DIR"
  "$VM_DISK_PATH"
  "$AZK_DATA_PATH/run"
  "$AZK_DATA_PATH/logs"
)

azk.tput() {
  [ -z "$TERM" ] && return 0
  eval "tput $@"
}

azk.escape() {
  echo "$@" | sed "
    s/%{red}/$(azk.tput setaf 1)/g;
    s/%{green}/$(azk.tput setaf 2)/g;
    s/%{yellow}/$(azk.tput setaf 3)/g;
    s/%{blue}/$(azk.tput setaf 4)/g;
    s/%{magenta}/$(azk.tput setaf 5)/g;
    s/%{cyan}/$(azk.tput setaf 6)/g;
    s/%{white}/$(azk.tput setaf 7)/g;
    s/%{reset}/$(azk.tput sgr0)/g;
    s/%{[a-z]*}//g;
  "
}

azk.escape_clear() {
  echo "$@" | sed "s/%{[a-z]*}//g;"
}

log() {
  e="echo"
  if [ -n "$2" -a "$1" == "-n" ]; then
    shift
    e="echo -n"
  fi
  $e >&2 "$(azk.escape "${*}")"
  $e >&1 "$(azk.escape_clear "${*}")" | logger -t azk-configure
}

download() {
  log "%{cyan}azk%{reset}: Downloading $1 to $2" | logger -t azk-configure
  curl -L "$1" -o "$2" --connect-timeout 10 &>/dev/null
}

# Check if all required commands exist
cmd_exists() {
  while [ -n "$1" ]; do
    command -v $1 >/dev/null 2>&1 || \
      { log "command '$1' is required but not installed. Aborting."; notOK=1; }
    shift
  done
  if [ -n "$notOK" ]; then
    exit 1
  fi
}
cmd_exists git nc curl grep head tr

# Roles
check_data_folders() {
  for dir in "${data_folders[@]}"; do
    [ -d "$dir" ] || mkdir -p $dir
  done
}

check_nvm() {
  [ -n "$update" ] && rm $nvm_file 2>/dev/null
  [ -f $nvm_file ]
}

check_node() {
  . $libexec_deps/nvm.sh
  nvm use $node_version &>/dev/null
}

check_npm() {
  [ -n "$update" ] && return 1;
  [ -d $AZK_ROOT_PATH/node_modules ]
}

check_sum() {
  shasum --portable $1 | awk '{ print $1 }'
}

check_unfsd() {
  [ "$AZK_USE_VM" == "false" ] && return 0;
  [ -n "$AZK_UNFSD_PATH" ]
}

check_boot_disk() {
  [ -n "$update" -a -f $boot_file ] && {
    actual_version=`shasum --portable $boot_file | awk '{ print $1 }'`
    new_version=`curl http://azk.s3.amazonaws.com/debian2docker.sha 2>/dev/null`
    [ "${actual_version}" != "${new_version}" ] && {
      rm $boot_file
    }
  }
  [ -f $boot_file ]
}

check_data_disk() {
  [ -f $VM_DISK_PATH/azk-agent.vmdk.bz ]
}

# Check for depedencies
# TODO: format logs as standard
msg_depens() {
  inst=${2:-Run 'azk configure'}
  log "%{red}azk%{reset}: error dependencies '$1' not installed. $inst"
  exit 1
}

check_depedencies() {
  check_data_folders
  check_unfsd || msg_depens 'unfsd' "$UNFSD_INSTALL"
  check_nvm  || msg_depens nvm
  check_node || msg_depens node
  check_npm  || msg_depens 'node dependencies'
  check_data_disk || msg_depens 'blank data disk'
  check_boot_disk || msg_depens 'iso vm boot'
}

check_install() {
  log -n "%{yellow}azk%{reset}: Check $2: "
  if `$1` ; then
    azk.escape "[%{green}ok%{reset}]" >&2
  else
    azk.escape "[%{red}fail%{reset}]" >&2
    return 1
  fi
}

update_code_base() {
  if [ -n "$update" ]; then
    cd "$AZK_ROOT_PATH"
    ./bin/azk agent status &>/dev/null && {
      log "%{red}azk%{reset}: agent is running, stop before update!"
      exit 1;
    }
    log -n "%{green}azk%{reset}: Update code..."
    git pull . origin/stable 2>&1 | logger -t azk
    log "[%{green}ok%{reset}]" >&2
  fi
}

configure() {
  check_unfsd || msg_depens 'unfsd' "$UNFSD_INSTALL"

  [ "$1" == '--update' ] && { update="true"; }
  log_i() { azk.escape -n "%{green}azk%{reset}: ${@}"; }

  # Update azk code base
  update_code_base

  check_install "check_nvm" "nvm" || {
    log_i "Install nvm..."
    download $nvm_url $nvm_file
  }

  # Load nvm
  mkdir -p $NVM_DIR
  . $libexec_deps/nvm.sh

  check_install "check_node" "node" || {
    log_i "Install node..."
    nvm install $node_version
  }

  nvm use $node_version &>/dev/null
  check_install "check_npm" "azk node dependencies" || {
    log_i "Install node depedencies..."
    cd $AZK_ROOT_PATH
    #npm install --production
  }

  # Vm disks
  mkdir -p $VM_DISK_PATH

  check_install "check_boot_disk" "iso to boot vm" || {
    log_i "Download iso"
    download $boot_url $boot_file
  }

  check_install "check_data_disk" "blank data disk" || {
    log_i "Download disk"
    download $data_url $VM_DISK_PATH/azk-agent.vmdk.bz
  }

  [ -n "$update" ] && {
    log "%{magenta}azk%{reset}: Update done, re-check dependencies";
    exec $AZK_ROOT_PATH/bin/azk configure;
  }
}

azk_main() {
  case "$1" in
    update)
      configure --update
      ;;
    configure)
      configure
      ;;
    nvm)
      check_depedencies
      shift; "${@}"
      ;;
    *)
      check_depedencies
      cd $AZK_ROOT_PATH && node $NODE_DEBUG --harmony $AZK_ROOT_PATH/bin/azk.js "${@}"
  esac
}

# run main function
azk_main "${@}"
